package main

import (
	"bufio"
	"flag"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/go-ping/ping"
)

var (
	aliveHosts    []string
	notAliveHosts []string
)

func pingHost(host string, verbose bool) {
	pinger, err := ping.NewPinger(host)

	if err != nil {
		log.Printf("Error creating pinger for host %s: %s", host, err.Error())
		return
	}

	pinger.Count = 1
	pinger.Timeout = 1 * time.Second

	err = pinger.Run()
	if err != nil {
		log.Printf("Error while pinging %s: %s\n", host, err.Error())
		return
	}

	stats := pinger.Statistics()
	if stats.PacketsRecv > 0 {
		aliveHosts = append(aliveHosts, host)
		if verbose {
			log.Printf("%s is alive.", host)
		}
	} else {
		notAliveHosts = append(notAliveHosts, host)
		if verbose {
			log.Printf("%s is NOT alive.", host)
		}
	}

}

func pingHostsFromFile(filePath string, verbose bool) {
	log.Printf("Pinging hosts from file: %s\n", filePath)

	file, err := os.Open(filePath)
	if err != nil {
		log.Printf("Error opening file: %s\n", err.Error())
		return
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		host := scanner.Text()
		pingHost(host, verbose)
	}

	if err := scanner.Err(); err != nil {
		log.Printf("Error reading file: %s\n", err.Error())
	}

}

func main() {

	var host, file string
	var verbose bool
	flag.StringVar(&host, "host", "", "Specify a host to ping")
	flag.StringVar(&host, "h", "", "Specify a host to ping")
	flag.StringVar(&file, "file", "", "Specify a file containing hosts to ping")
	flag.StringVar(&file, "f", "", "Specify a file containing hosts to ping")
	flag.BoolVar(&verbose, "verbose", false, "Print detailed output")
	flag.BoolVar(&verbose, "v", false, "Print detailed output")
	flag.Parse()

	if host == "" && file == "" {
		log.Println("Error: You must specify either -h, --host or -f, --file option.")
		flag.PrintDefaults()
		os.Exit(1)
	}

	if host != "" {
		log.Printf("Pinging host: %s\n", host)
		pingHost(host, verbose)
	} else {
		pingHostsFromFile(file, verbose)
	}

	fmt.Println("Not alive hosts:")
	for _, host := range notAliveHosts {
		fmt.Println(host)
	}

	fmt.Println("-----------------------------------\n")

	fmt.Println("Alive hosts:")
	for _, host := range aliveHosts {
		fmt.Println(host)
	}

}
