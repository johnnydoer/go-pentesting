package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"time"

	"github.com/go-ping/ping"
)

func pingHost(host string) {
	pinger, err := ping.NewPinger(host)
	fmt.Printf("Pinging host: %s\n", host)

	if err != nil {
		fmt.Printf("Error creating pinger: %s\n", err.Error())
		return
	}

	pinger.Count = 1
	pinger.Timeout = 1 * time.Second

	err = pinger.Run()
	if err != nil {
		fmt.Printf("Error while pinging %s: %s\n", host, err.Error())
		return
	}

	stats := pinger.Statistics()
	if stats.PacketsRecv > 0 {
		fmt.Printf("%s is alive.\n", host)
	} else {
		fmt.Printf("%s is NOT alive.\n", host)
	}

}

func pingHostsFromFile(filePath string) {
	fmt.Printf("Pinging hosts from file: %s\n", filePath)

	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file: %s\n", err.Error())
		return
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		host := scanner.Text()
		pingHost(host)
	}

	if err := scanner.Err(); err != nil {
		fmt.Printf("Error reading file: %s\n", err.Error())
	}
}

func main() {

	var host, file string
	flag.StringVar(&host, "host", "", "Specify a host to ping")
	flag.StringVar(&host, "h", "", "Specify a host to ping")
	flag.StringVar(&file, "file", "", "Specify a file containing hosts to ping")
	flag.StringVar(&file, "f", "", "Specify a file containing hosts to ping")

	flag.Parse()

	if host == "" && file == "" {
		fmt.Println("Error: You must specify either -h, --host or -f, --file option.")
		flag.PrintDefaults()
		os.Exit(1)
	}

	if host != "" {
		pingHost(host)
	} else {
		pingHostsFromFile(file)
	}

}
